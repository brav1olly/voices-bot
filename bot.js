// voices_bot_telegraf.js
// Telegraf v4 bot for Telegram implementing the "Voices" flow with only Telegraf.
// After user finishes flow, all collected data is sent to a specific admin chat.

require('dotenv').config();
const { Telegraf, Markup, session } = require('telegraf');

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID; // set in .env

if (!BOT_TOKEN) {
  console.error('Please set TELEGRAM_BOT_TOKEN in .env');
  process.exit(1);
}
if (!ADMIN_CHAT_ID) {
  console.error('Please set ADMIN_CHAT_ID in .env');
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);
bot.use(session());

// Keyboards / Buttons
const kbStart = Markup.inlineKeyboard([
  [Markup.button.callback('–•–æ—á—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å', 'I_WANT_TO_TELL')],
  [Markup.button.callback('–•–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', 'I_WANT_TO_LEARN')],
]);

const kbLearn = Markup.inlineKeyboard([[Markup.button.callback('–î–∞, –¥–∞–≤–∞–π—Ç–µ', 'LETS_START')]]);

const kbContactYesNo = Markup.inlineKeyboard([
  [Markup.button.callback('–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', 'LEAVE_CONTACT')],
  [Markup.button.callback('–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ', 'NO_CONTACT')],
]);

const kbFinal = Markup.inlineKeyboard([
  [Markup.button.callback('–ó–∞–ø–∏—Å–∞—Ç—å –µ—â—ë –æ–¥–Ω–æ', 'RECORD_MORE')],
  [Markup.button.callback('–ó–∞–≤–µ—Ä—à–∏—Ç—å', 'FINISH')],
]);

// Start message
bot.start(async (ctx) => {
  ctx.session = {};
  await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ ¬´Voices¬ª @voices_mag.\n\n–ú—ã —Å–æ–±–∏—Ä–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ —Ç–æ, –∫–∞–∫ –º–µ–Ω—è–µ–º—Å—è –º—ã –∏ –º–∏—Ä –≤–æ–∫—Ä—É–≥ —Å 2022 –≥–æ–¥–∞.\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ—Ç.\n–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å –∏—Å–∫—Ä–µ–Ω–Ω–µ.\n\n–ì–æ—Ç–æ–≤—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π? üéôÔ∏è', kbStart);
});

// Handler for the "–•–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ" flow
bot.action('I_WANT_TO_LEARN', async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (e) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ answerCbQuery (query too old)
  }
  await ctx.reply(`Voices ‚Äî —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≤–µ–±-–∑–∏–Ω.\n–ú—ã —Å–æ–±–∏—Ä–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –ª—é–¥–µ–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω, —á—Ç–æ–±—ã —É—Å–ª—ã—à–∞—Ç—å, –∫–∞–∫ –∑–≤—É—á–∏—Ç —ç—Ç–æ—Ç –º–∏—Ä –≤ –º–æ–º–µ–Ω—Ç –ø–µ—Ä–µ–º–µ–Ω.\n–≠—Ç–æ —Å–∞–π—Ç —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–æ–π.\n–ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —ç—Ç–æ —Ç–æ—á–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ. –ò –≥–æ–ª–æ—Å –∑–∞ –Ω–µ–π.\n–ì–æ–ª–æ—Å —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —á—Ç–æ-—Ç–æ –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç. –ö–∞–∫ –∏ –º—ã –≤—Å–µ.\n–ú—ã –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –¥–∞—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:\n ‚Äî –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è –æ —Ç–æ–º, —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å\n ‚Äî —É—Å–ª—ã—à–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∏ –Ω–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –æ–¥–∏–Ω–æ–∫–∏–º\n\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:\n ‚Äî –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–¥—ã?\n ‚Äî –ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?\n ‚Äî –ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –¥–µ—Ä–∂–∞—Ç—å—Å—è?\n\n–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?`, kbLearn);
});

bot.action('LETS_START', async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (e) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ answerCbQuery (query too old)
  }
  await startStoryFlow(ctx);
});

bot.action('I_WANT_TO_TELL', async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (e) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ answerCbQuery (query too old)
  }
  await startStoryFlow(ctx);
});

async function startStoryFlow(ctx) {
  if (!ctx.session) {
    ctx.session = {};
  }
  ctx.session.state = 'AWAITING_NAME_CITY';
  ctx.session.collected = {
    userId: ctx.from.id,
    username: ctx.from.username || null,
    nameAndCity: null,
    voices: [],
    contact: null,
    createdAt: new Date().toISOString(),
  };

  await ctx.reply('–°–Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –æ—Ç–∫—É–¥–∞ –≤—ã, –∏ –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç. –ò–º—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–º. –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞—à –≥–æ–ª–æ—Å –Ω–∞ –∫–∞—Ä—Ç–µ.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n> –ê–Ω–Ω–∞, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, –†–æ—Å—Å–∏—è\n> –ê—Ä—Ç–µ–º, –ë–µ—Ä–ª–∏–Ω, –ì–µ—Ä–º–∞–Ω–∏—è\n> –ê–Ω—Ç–æ–Ω, –ï—Ä–µ–≤–∞–Ω, –ê—Ä–º–µ–Ω–∏—è');
}

// Text handler for name/city and for contact input
bot.on('text', async (ctx) => {
  const state = ctx.session && ctx.session.state;
  const text = ctx.message.text.trim();

  if (state === 'AWAITING_NAME_CITY') {
    if (!ctx.session.collected) {
      ctx.session.collected = {
        userId: ctx.from.id,
        username: ctx.from.username || null,
        nameAndCity: null,
        voices: [],
        contact: null,
        createdAt: new Date().toISOString(),
      };
    }
    ctx.session.collected.nameAndCity = text;
    ctx.session.state = 'AWAITING_VOICE';
    await ctx.reply('–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å ‚Äî –≤–∞—à –≥–æ–ª–æ—Å.\n\n–ú–æ–∂–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤—Å—ë, —á—Ç–æ —Ö–æ—á–µ—Ç—Å—è.\n–ï—Å–ª–∏ –Ω—É–∂–µ–Ω –æ—Ä–∏–µ–Ω—Ç–∏—Ä ‚Äî –≤–æ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n‚Ä¢ –ì–¥–µ –≤—ã –±—ã–ª–∏, –∫–æ–≥–¥–∞ –≤—Å—ë –Ω–∞—á–∞–ª–æ—Å—å?\n‚Ä¢ –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≥–æ–¥–∞?\n‚Ä¢ –ö–∞–∫–∏–µ —á—É–≤—Å—Ç–≤–∞ –≤–µ–¥—É—â–∏–µ –≤ —ç—Ç–∏ —Ç—Ä–∏ –≥–æ–¥–∞: –≤–∏–Ω–∞, –≥–Ω–µ–≤, –±–µ—Å—Å–∏–ª–∏–µ, —Å–∏–ª–∞, –Ω–∞–¥–µ–∂–¥–∞, –≥–æ—Ä–µ, –±–µ–∑—Ä–∞–∑–ª–∏—á–∏–µ?\n‚Ä¢ –ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –¥–µ—Ä–∂–∞—Ç—å—Å—è? –ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–∫–∞–∑–∞—Ç—å –∫–æ–º—É-—Ç–æ, –∫—Ç–æ –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç –ø–æ—Ö–æ–∂–µ–µ?\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å, –∫–∞–∫ –∏–¥—ë—Ç. –•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, –Ω–æ –º–æ–∂–Ω–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—Ç–æ—Ä—ã ‚Äî –¥–≤–µ –º–∏–Ω—É—Ç—ã.\n\n–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å. –ï—Å–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –º—ã –±–µ—Ä–µ–∂–Ω–æ —Å–∫–ª–µ–∏–º –∏—Ö –≤ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å.');
    return;
  }

  if (state === 'AWAITING_CONTACT') {
    if (!ctx.session.collected) {
      ctx.session.collected = {
        userId: ctx.from.id,
        username: ctx.from.username || null,
        nameAndCity: null,
        voices: [],
        contact: null,
        createdAt: new Date().toISOString(),
      };
    }
    ctx.session.collected.contact = text;
    ctx.session.state = null;
    await sendToAdmin(ctx);
    await ctx.reply('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã.\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å.\n–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ ‚Äî –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â—ë.', kbFinal);
    return;
  }

  if (!state) {
    await ctx.reply('–Ø –≤–∞—Å –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É.');
  }
});

// Voice message handling
bot.on('voice', async (ctx) => {
  const state = ctx.session && ctx.session.state;
  if (!state || (state !== 'AWAITING_VOICE' && state !== 'AWAITING_CONTACT')) {
    await ctx.reply('–Ø –ø–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ, –Ω–æ –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –∫ –∫–∞–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –µ–≥–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å. –ù–∞–∂–º–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–•–æ—á—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å".');
    return;
  }

  const voice = ctx.message.voice;
  if (!ctx.session.collected) {
    ctx.session.collected = {
      userId: ctx.from.id,
      username: ctx.from.username || null,
      nameAndCity: null,
      voices: [],
      contact: null,
      createdAt: new Date().toISOString(),
    };
  }
  ctx.session.collected.voices.push({
    file_id: voice.file_id,
    file_unique_id: voice.file_unique_id,
    duration: voice.duration,
  });

  await ctx.reply('–°–ø–∞—Å–∏–±–æ. –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–æ.\n\n–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç, —á—Ç–æ–±—ã –º—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –≤–∞–º —Å—Å—ã–ª–∫—É, –∫–æ–≥–¥–∞ –∑–∞–ø–∏—Å—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ? –≠—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.', kbContactYesNo);
  ctx.session.state = 'AWAITING_CONTACT_DECISION';
});

bot.action('LEAVE_CONTACT', async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (e) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ answerCbQuery (query too old)
  }
  if (!ctx.session) {
    ctx.session = {};
  }
  ctx.session.state = 'AWAITING_CONTACT';
  await ctx.reply('–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –∏–ª–∏ Telegram-–Ω–∏–∫–Ω–µ–π–º.\n–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã.');
});

bot.action('NO_CONTACT', async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (e) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ answerCbQuery (query too old)
  }
  if (!ctx.session) {
    ctx.session = {};
  }
  ctx.session.state = null;
  await sendToAdmin(ctx);
  await ctx.reply('–°–ø–∞—Å–∏–±–æ. –í–∞—à –≥–æ–ª–æ—Å ‚Äî —á–∞—Å—Ç—å –∂–∏–≤–æ–π –∫–∞—Ä—Ç—ã.\n–ú—ã –±–µ—Ä–µ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∏ —Ä–∞–∑–º–µ—Å—Ç–∏–º –µ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω–æ.\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å.\n–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ ‚Äî –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â—ë.', kbFinal);
});

bot.action('RECORD_MORE', async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (e) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ answerCbQuery (query too old)
  }
  if (!ctx.session) {
    ctx.session = {};
  }
  ctx.session.state = 'AWAITING_VOICE';
  await ctx.reply('–•–æ—Ä–æ—à–æ ‚Äî –∑–∞–ø–∏—à–∏—Ç–µ –µ—â—ë –æ–¥–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å. –ú—ã —Å–∫–ª–µ–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –≤ –æ–¥–Ω—É.');
});

bot.action('FINISH', async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (e) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ answerCbQuery (query too old)
  }
  ctx.session = {};
  await ctx.reply('–°–ø–∞—Å–∏–±–æ! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ ‚Äî –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â—ë. –ú—ã —Ä—è–¥–æ–º.');
});

// Send collected data to admin chat
async function sendToAdmin(ctx) {
  const data = ctx.session.collected;
  if (!data) return;

  const date = new Date(data.createdAt);
  const formattedDate = date.toLocaleString('ru-RU', { dateStyle: 'short', timeStyle: 'short' });

  let message = `üÜï –ù–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${data.username ? '@' + data.username : data.userId}\n`;
  message += `–ò–º—è/–≥–æ—Ä–æ–¥: ${data.nameAndCity || '‚Äî'}\n`;
  message += `–ö–æ–Ω—Ç–∞–∫—Ç: ${data.contact || '‚Äî'}\n`;
  message += `–î–∞—Ç–∞: ${formattedDate}`;

  try {
    if (data.voices.length > 0) {
      // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º
      const [first, ...rest] = data.voices;
      await ctx.telegram.sendVoice(ADMIN_CHAT_ID, first.file_id, { 
        caption: message,
        message_thread_id: 110
      });
      // –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
      for (const v of rest) {
        await ctx.telegram.sendVoice(ADMIN_CHAT_ID, v.file_id, {
          message_thread_id: 110
        });
      }
    } else {
      await ctx.telegram.sendMessage(ADMIN_CHAT_ID, message, {
        message_thread_id: 110
      });
    }
  } catch (e) {
    console.error('Error sending to admin chat:', e);
  }
}

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

bot.launch().then(() => console.log('Bot started'));
